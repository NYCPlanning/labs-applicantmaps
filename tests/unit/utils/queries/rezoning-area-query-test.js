import queriesRezoningAreaQuery, { fillMultiPolygonHoles } from 'labs-applicant-maps/utils/queries/rezoning-area-query';
import { module, test } from 'qunit';
import setupMirage from 'ember-cli-mirage/test-support/setup-mirage';
import { setupTest } from 'ember-qunit';
import random from 'labs-applicant-maps/tests/helpers/random-geometry';

const { randomPolygon } = random;

module('Unit | Utility | queries/rezoning-area-query', function(hooks) {
  setupTest(hooks);
  setupMirage(hooks);

  // Replace this with your real tests.
  test('it works', async function(assert) {
    const project = this.server.create('project');
    this.server.create('geometric-property', {
      geometryType: 'underlyingZoning',
      hasCanonical: true,
      proposedGeometry: randomPolygon(3),
      canonical: randomPolygon(1),
      project,
    });

    const store = this.owner.lookup('service:store');
    const model = await store.findRecord('project', 1, { include: 'geometric-properties' });

    const result = await queriesRezoningAreaQuery(
      model.get('developmentSite'),
      model.get('geometricProperties'),
    );

    assert.ok(result.features);
  });

  test('it fills in holes', function(assert) {
    const exteriorRing = [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]];
    const interiorRing1 = [[1, 1], [1, 2], [2, 2], [2, 1], [1, 1]];
    const interiorRing2 = [[2, 2], [2, 3], [3, 3], [3, 2], [2, 2]];

    const feature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          exteriorRing,
          interiorRing1,
          interiorRing2,
        ],
      },
    };

    const targetFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          exteriorRing,
        ],
      },
    };

    const filledInFeature = fillMultiPolygonHoles(feature);

    assert.deepEqual(filledInFeature, targetFeature);
  });

  test('it fills in holes for all multipolygons', function(assert) {
    const feature = {
      type: 'Feature',
      geometry: {
        type: 'MultiPolygon',
        coordinates: [
          [ // first polygon
            [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]], // exterior ring
            [[1, 1], [1, 2], [2, 2], [2, 1], [1, 1]], // interior ring
            [[2, 2], [2, 3], [3, 3], [3, 2], [2, 2]], // interior ring
          ],
          [ // second polygon
            [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]], // exterior ring
            [[1, 1], [1, 2], [2, 2], [2, 1], [1, 1]], // interior ring
            [[2, 2], [2, 3], [3, 3], [3, 2], [2, 2]], // interior ring
          ],
        ],
      },
    };

    const targetFeature = {
      type: 'Feature',
      geometry: {
        type: 'MultiPolygon',
        coordinates: [
          [ // first polygon
            [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]], // exterior ring
          ],
          [ // second polygon
            [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]], // exterior ring
          ],
        ],
      },
    };

    const filledInFeature = fillMultiPolygonHoles(feature);

    assert.deepEqual(filledInFeature, targetFeature);
  });

  test('fills in complex MultiPolygon', function(assert) {
    const feature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          // exterior ring
          [[-74.01087957731629, 40.72151120458326], [-74.01092219427278, 40.72153544517225], [-74.01092547058691, 40.72156026095998], [-74.01077746620999, 40.72208126216913], [-74.0102945661212, 40.722915362168216], [-74.01028921968934, 40.72292253105635], [-74.00959580184481, 40.72366583487929], [-74.00958860715109, 40.72367208773731], [-74.00871161505599, 40.72429366440573], [-74.00870291392582, 40.724298680875705], [-74.00778691224392, 40.72472309809988], [-74.0077343604414, 40.72472465569139], [-74.00770530558412, 40.724683238677514], [-74.0078668611133, 40.72369236455397], [-74.008040006223, 40.722805541148446], [-74.0080709147251, 40.72265266583786], [-74.00607944768504, 40.72242180918977], [-74.00604870982528, 40.72240975390401], [-74.00591134380667, 40.722301614730654], [-74.00543786985615, 40.72194700437597], [-74.00501405072342, 40.72163886148933], [-74.00469813785939, 40.72143654809288], [-74.00412863693569, 40.721033701829455], [-74.00409090001908, 40.721002349167364], [-74.00348738901353, 40.72057584270117], [-74.00193132317061, 40.71946901038156], [-74.0019144187374, 40.71944073641662], [-74.00186461417611, 40.71942177390178], [-74.00185727889624, 40.71937068030535], [-74.00248034341355, 40.718637102726206], [-74.00181142543917, 40.71833537337448], [-74.00097995768185, 40.717963971361584], [-74.00095342831514, 40.717929234168864], [-74.00096299326475, 40.7179055407048], [-74.00152430032334, 40.71728975178347], [-74.00159796644161, 40.71727868272388], [-74.00306622155557, 40.71799991369675], [-74.0035934990319, 40.718243335278295], [-74.005057887559, 40.71653472503514], [-74.00509142639525, 40.716517094535654], [-74.00513165200285, 40.71652233603869], [-74.00625869769544, 40.71704458632614], [-74.00627689382164, 40.71710036939094], [-74.00583222619458, 40.71766656689366], [-74.0064232173472, 40.71793892082137], [-74.00704555560638, 40.71822967846972], [-74.00720204372203, 40.71803387797843], [-74.0069508333613, 40.717924073948964], [-74.006926860273, 40.71790087741931], [-74.0069460441389, 40.717845360763846], [-74.00684318999899, 40.717794256569306], [-74.00676708353316, 40.717742928972555], [-74.0067533264766, 40.71769639829368], [-74.00697107556736, 40.71743890644123], [-74.00689058753113, 40.71740243184292], [-74.00687143140605, 40.71734712469749], [-74.00725639406001, 40.716835714405896], [-74.00666457649355, 40.71656348658332], [-74.00664367997315, 40.716545894610746], [-74.00664625682215, 40.71650749997215], [-74.0070414911273, 40.71600855164813], [-74.00643629923397, 40.715734317499646], [-74.00598238043658, 40.71552678013941], [-74.00597323453695, 40.715474771676284], [-74.00642788600251, 40.71493093471264], [-74.00646071584475, 40.7149130980047], [-74.00654403188486, 40.71493683338822], [-74.00756293063105, 40.715404787069126], [-74.00802399610072, 40.715618042043076], [-74.00817220443123, 40.71568191167015], [-74.00922073575774, 40.71615869853623], [-74.01058888658883, 40.71677804760858], [-74.01061488587149, 40.71680928534464], [-74.0106940772476, 40.71744776582377], [-74.01069350510332, 40.717458639667825], [-74.01038406234704, 40.71879722902999], [-74.01017314547234, 40.72011359296167], [-74.01005417514365, 40.72075148883706], [-74.00996420202193, 40.721424298485466], [-74.01087957731629, 40.72151120458326]],
          // interior ring
          [[-74.00578551089872, 40.72025061827359], [-74.00572120096638, 40.720221252969715], [-74.00570469726522, 40.72024260870069], [-74.00578551089872, 40.72025061827359]],
          // interior ring
          [[-74.00954604949848, 40.7172288121466], [-74.00925396210859, 40.71708564633678], [-74.00923893445912, 40.71708878269803], [-74.00922629527797, 40.71718351105893], [-74.0092356614913, 40.717192243761], [-74.00954604949848, 40.7172288121466]],
        ],
      },
    };

    const targetFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          // single exterior ring
          [[-74.01087957731629, 40.72151120458326], [-74.01092219427278, 40.72153544517225], [-74.01092547058691, 40.72156026095998], [-74.01077746620999, 40.72208126216913], [-74.0102945661212, 40.722915362168216], [-74.01028921968934, 40.72292253105635], [-74.00959580184481, 40.72366583487929], [-74.00958860715109, 40.72367208773731], [-74.00871161505599, 40.72429366440573], [-74.00870291392582, 40.724298680875705], [-74.00778691224392, 40.72472309809988], [-74.0077343604414, 40.72472465569139], [-74.00770530558412, 40.724683238677514], [-74.0078668611133, 40.72369236455397], [-74.008040006223, 40.722805541148446], [-74.0080709147251, 40.72265266583786], [-74.00607944768504, 40.72242180918977], [-74.00604870982528, 40.72240975390401], [-74.00591134380667, 40.722301614730654], [-74.00543786985615, 40.72194700437597], [-74.00501405072342, 40.72163886148933], [-74.00469813785939, 40.72143654809288], [-74.00412863693569, 40.721033701829455], [-74.00409090001908, 40.721002349167364], [-74.00348738901353, 40.72057584270117], [-74.00193132317061, 40.71946901038156], [-74.0019144187374, 40.71944073641662], [-74.00186461417611, 40.71942177390178], [-74.00185727889624, 40.71937068030535], [-74.00248034341355, 40.718637102726206], [-74.00181142543917, 40.71833537337448], [-74.00097995768185, 40.717963971361584], [-74.00095342831514, 40.717929234168864], [-74.00096299326475, 40.7179055407048], [-74.00152430032334, 40.71728975178347], [-74.00159796644161, 40.71727868272388], [-74.00306622155557, 40.71799991369675], [-74.0035934990319, 40.718243335278295], [-74.005057887559, 40.71653472503514], [-74.00509142639525, 40.716517094535654], [-74.00513165200285, 40.71652233603869], [-74.00625869769544, 40.71704458632614], [-74.00627689382164, 40.71710036939094], [-74.00583222619458, 40.71766656689366], [-74.0064232173472, 40.71793892082137], [-74.00704555560638, 40.71822967846972], [-74.00720204372203, 40.71803387797843], [-74.0069508333613, 40.717924073948964], [-74.006926860273, 40.71790087741931], [-74.0069460441389, 40.717845360763846], [-74.00684318999899, 40.717794256569306], [-74.00676708353316, 40.717742928972555], [-74.0067533264766, 40.71769639829368], [-74.00697107556736, 40.71743890644123], [-74.00689058753113, 40.71740243184292], [-74.00687143140605, 40.71734712469749], [-74.00725639406001, 40.716835714405896], [-74.00666457649355, 40.71656348658332], [-74.00664367997315, 40.716545894610746], [-74.00664625682215, 40.71650749997215], [-74.0070414911273, 40.71600855164813], [-74.00643629923397, 40.715734317499646], [-74.00598238043658, 40.71552678013941], [-74.00597323453695, 40.715474771676284], [-74.00642788600251, 40.71493093471264], [-74.00646071584475, 40.7149130980047], [-74.00654403188486, 40.71493683338822], [-74.00756293063105, 40.715404787069126], [-74.00802399610072, 40.715618042043076], [-74.00817220443123, 40.71568191167015], [-74.00922073575774, 40.71615869853623], [-74.01058888658883, 40.71677804760858], [-74.01061488587149, 40.71680928534464], [-74.0106940772476, 40.71744776582377], [-74.01069350510332, 40.717458639667825], [-74.01038406234704, 40.71879722902999], [-74.01017314547234, 40.72011359296167], [-74.01005417514365, 40.72075148883706], [-74.00996420202193, 40.721424298485466], [-74.01087957731629, 40.72151120458326]],
        ],
      },
    };

    const filledInFeature = fillMultiPolygonHoles(feature);

    assert.deepEqual(filledInFeature, targetFeature);
  });

  test('it continues succeeds with (multi)polygons having no interior rings', function(assert) {
    const exteriorRing = [[0, 0], [0, 4], [4, 4], [4, 0], [0, 0]];

    const polygonFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          exteriorRing,
        ],
      },
    };

    const targetPolygonFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'Polygon',
        coordinates: [
          exteriorRing,
        ],
      },
    };

    const filledInFeature = fillMultiPolygonHoles(polygonFeature);

    assert.deepEqual(filledInFeature, targetPolygonFeature);

    const multiPolygonFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'MultiPolygon',
        coordinates: [
          [exteriorRing],
          [exteriorRing],
        ],
      },
    };

    const targetMultiPolygonFeature = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'MultiPolygon',
        coordinates: [
          [exteriorRing],
          [exteriorRing],
        ],
      },
    };

    const filledInMultiPolygonFeature = fillMultiPolygonHoles(multiPolygonFeature);

    assert.deepEqual(filledInMultiPolygonFeature, targetMultiPolygonFeature);
  });
});
